import java.io.*;
import java.util.*;

public class Main {
/*
4 4
1 2 3 4
1 2 4 3
1 3 2 4
1 3 4 2
1 4 2 3
1 4 3 2
2 1 3 4
2 1 4 3
2 3 1 4
2 3 4 1
2 4 1 3
2 4 3 1
3 1 2 4
3 1 4 2
3 2 1 4
3 2 4 1
3 4 1 2
3 4 2 1
4 1 2 3
4 1 3 2
4 2 1 3
4 2 3 1
4 3 1 2
4 3 2 1

4 2
1 2
1 3
1 4
2 1
2 3
2 4
3 1
3 2
3 4
4 1
4 2
4 3
 */
    public static int[] arr;
    public static boolean[] visited;
    public static int N;
    public static int M;
    public static Stack<Integer> stack;
    public static BufferedWriter bw;

    public static void main(String[] argv) throws IOException {
        stack = new Stack();

        BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
        bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st = new StringTokenizer(bf.readLine());
        N = Integer.valueOf(st.nextToken());
        M = Integer.valueOf(st.nextToken());

        arr = new int[N];
        visited = new boolean[N];
        for(int i = 0; i < N; i++){
            arr[i] = i+1;
        }
        for(int j = 0; j < N; j++){
            visited[j] = true;
            stack.push(arr[j]);
            DFS(j, 0);
            visited[j] = false;
            stack.pop();
        }
        bw.flush();
        bw.close();
    }
    public static void DFS(int start, int depth) throws IOException {
        if (depth == M-1){
            Object[] arr2 = stack.toArray();
            for(Object o : arr2){
                bw.write(String.valueOf(o) + " ");
            }
            bw.write("\n");
            return;
        }

        for (int i = 0; i < N; i++){
            if(visited[i]){
                continue;
            }
            visited[i] = true;
            stack.push(arr[i]);
            DFS(i, depth+1);
            visited[i] = false;
            stack.pop();
        }

    }
}

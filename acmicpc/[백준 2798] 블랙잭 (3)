import java.io.*;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {
    /*
5 21
5 6 7 8 9
     */
    public static int n;
    public static int m;
    public static int max;
    public static int result;
    public static int[] arr;
    public static boolean[] visited;


    public static void main(String argv[]) throws IOException {
        BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st = new StringTokenizer(bf.readLine());
        n = Integer.valueOf(st.nextToken());
        m = Integer.valueOf(st.nextToken());
        max = Integer.MAX_VALUE;
        StringTokenizer st2 = new StringTokenizer(bf.readLine());
        arr = new int[n];
        visited = new boolean[n];
        int l= 0;
        while(st2.hasMoreTokens()){
            arr[l++] = Integer.valueOf(st2.nextToken());
        }
        for(int i = 0; i < n; i++){
            visited[i] = true;
            DFS(i, 0, arr[i]);
            visited[i] = false;
        }

        bw.write(String.valueOf(result));
        bw.flush();
        bw.close();
    }

    public static void DFS(int start, int depth, int sum){
        if(depth == 2){
            if(Math.abs(m-sum) < max && sum <= m){
                max = Math.abs(m-sum);
                result = sum;
            }
            return;
        }
        for(int i = start; i < n; i++){
            if(visited[i]){
                continue;
            }
            visited[i] = true;
            DFS(i + 1,depth+1, sum + arr[i]);
            visited[i] = false;
        }
    }
}
